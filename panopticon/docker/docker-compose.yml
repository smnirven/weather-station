name: panopticon
services:
  panopticon:
    build: 
      context: ../
      dockerfile: docker/Panopticon.Dockerfile
      # [Optional] You can use build args to set options. e.g. 'VARIANT' below affects the image in the Dockerfile
      args: 
        VARIANT: buster

    volumes:
      # This is where VS Code should expect to find your project's source code and the value of "workspaceFolder" in .devcontainer/devcontainer.json
      - ..:/workspace:cached

      # Uncomment the next line to use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
      # - /var/run/docker.sock:/var/run/docker.sock 

    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"  

    # Runs app on the same network as the service container, allows "forwardPorts" in devcontainer.json function.
    # network_mode: service:timescaledb
    
    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally. 
    # (Adding the "ports" property to this file will not forward from a Codespace.)

    # Uncomment the next line to use a non-root user for all processes - See https://aka.ms/vscode-remote/containers/non-root for details.
    # user: vscode

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    # cap_add:
    #   - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined
    
  # You can include other services not opened by VS Code as well
  timescaledb:
    image: timescale/timescaledb-ha:pg16
    platform: linux/amd64
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=letmein
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - "5432:5432"
    volumes: 
      - timescale-data:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ../schema.sql:/docker-entrypoint-initdb.d/schema.sql
    # As in the "app" service, use "forwardPorts" in **devcontainer.json** to forward an app port locally.

  rabbitmq:
    build: 
      context: ../
      dockerfile: docker/MqttBroker.Dockerfile
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=letmein
    ports:
      - 1883:1883
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/
      - rabbitmq-logs:/var/log/rabbitmq
  consumer:
    build: 
      context: ../
      dockerfile: docker/Consumer.Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      timescaledb:
        condition: service_started
    restart: unless-stopped
volumes:
  timescale-data:
  rabbitmq-data:
  rabbitmq-logs:
